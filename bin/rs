#!/usr/bin/env python

# Copyright (C) 2007-2015, Raffaele Salmaso <raffaele@salmaso.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import absolute_import, division, print_function, unicode_literals
import errno
import os
from os.path import dirname
import sys
import subprocess

def mkdir(dir):
    try:
        os.makedirs(dir)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise e

def system(*args, **kwargs):
    env = kwargs.pop('env', None)
    return subprocess.call(list(args), env=env)

class uWsgi(object):
    def build_cmd(self, path, conf=None):
        import ConfigParser
        config = ConfigParser.SafeConfigParser({
            'wsgi': 'wsgi',
            'pidfile': 'uwsgi.pid',
        })
        if conf:
            config.read(conf)
            wsgi = config.get('wsgi', 'wsgi')
            pidfile = config.get('wsgi', 'pidfile')
        else:
            wsgi = "wsgi"
            pidfile = "uwsgi.pid"
        runpath = os.path.normpath(os.path.join(os.path.split(path)[0], "run"))
        mkdir(runpath)
        pidfile = os.path.join(runpath, pidfile)
        cmd = [
            'uwsgi',
            '--no-orphans',
            '--http', '0.0.0.0:8000',
            #'--static-map', '/media="%s/media"' % path,
            #'--static-map', '/static="%s/static"' % path,
            '--chdir', path,
            '--wsgi', wsgi,
            '--py-auto-reload', '3',
            '--pidfile', pidfile,
        ]
        return cmd

    def __call__(self, path):
        current_path = path
        while current_path != '/':
            wsgi = os.path.join(current_path, '.uwsgi')
            if os.path.exists(wsgi):
                os.chdir(current_path)
                cmd = self.build_cmd(current_path, wsgi)
                system(*cmd)
                return
            current_path = dirname(current_path)
        current_path = path
        while current_path != '/':
            manage = os.path.join(current_path, 'manage.py')
            if os.path.exists(manage):
                os.chdir(current_path)
                cmd = self.build_cmd(current_path)
                system(*cmd)
            current_path = dirname(current_path)
uwsgi = uWsgi()

class Manage(object):
    def __call__(self, path):
        while path != '/':
            manage = os.path.join(path, 'manage.py')
            if os.path.exists(manage):
                os.chdir(path)
                args = sys.argv[1:]
                cmd = []
                if sys.argv[0].split('/')[-1] == 'rs2':
                    cmd.append('python2')
                elif sys.argv[0].split('/')[-1] == 'rs3':
                    cmd.append('python3')
                cmd.append(manage)
                if '-9' in args:
                    args.remove('-9')
                    addr = '0.0.0.0:9000'
                else:
                    addr = '0.0.0.0:8000'
                cmd.extend(['runserver', '--insecure', addr])
                cmd.extend(args)
                system(*cmd)
            path = dirname(path)
manage = Manage()

if __name__ == '__main__':
    manage(os.getcwd())
